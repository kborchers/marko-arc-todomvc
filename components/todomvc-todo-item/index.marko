import todoApp from '../../app';

style {
    .todo-list li.pending .toggle, .todo-list li.pending button {
        visibility: hidden;
    }

    .todo-list li.pending label {
        color: #d9d9d9;
    }

    .todo-list li {
        opacity: 1;
        background-color: #fff;
        overflow: hidden;
    }

    .todo-list li.animate {
        transition: opacity 250ms ease-in-out, max-height 250ms ease-in-out;
    }
}

class {
    onCreate() {
        this.state = {
            isEditing: false,
            editingTitle: ''
        };
    }

    saveEdit() {
        if (this.state.isEditing) {
            var newTitle = this.getEl('titleInput').value;
            todoApp.updateTodo(this.input.id, { title: newTitle });
            this.state.isEditing = false;
        }
    }

    cancelEdit() {
        this.state.isEditing = false;
    }

    handleCheckboxChange(event, input) {
        var completed = input.checked === true;
        todoApp.setTodoCompleted(this.input.id, completed);
    }

    handleLabelDblClick() {
        this.state.isEditing = true;
        this.state.editingTitle = this.input.title;
    }

    removeTodo() {
        todoApp.removeTodo(this.input.id);
    }

    onUpdate() {
        if (this.state.isEditing) {
            var inputEl = this.getEl('titleInput');
            inputEl.focus();
            var val = inputEl.value;
            inputEl.value = '';
            inputEl.value = val;
        }
    }

    handleInputKeyDown(event) {
        if (event.keyCode === 13 /* ENTER */) {
            this.saveEdit();
        } else if (event.keyCode === 27 /* ESC */) {
            this.cancelEdit();
        }
    }

    handleDetach(event, node) {
        event.preventDefault();
        node.classList.add('animate');
        var height = node.offsetHeight;
        node.style.maxHeight = height + 'px';

        setTimeout(() => {
            node.style.maxHeight = '0px';
            node.style.opacity = 0;

            setTimeout(() => {
                event.detach();
            }, 250);
        }, 0);

    }

    handleAttach(event, node) {
        var clone = node.cloneNode(true);
        clone.style.position = 'absolute';
        clone.style.top = '-200px';
        clone.style.left = '-200px';
        node.parentNode.appendChild(clone);
        var height = clone.offsetHeight;

        clone.parentNode.removeChild(clone);

        node.classList.remove('animate');
        node.style.maxHeight = '0px';
        node.style.opacity = 0;

        setTimeout(() => {
            node.classList.add('animate');
            node.style.maxHeight = height + 'px';
            node.style.opacity = 1;
        }, 10);
    }
}

$ var className = {
    completed: input.completed,
    editing: state.isEditing
};

<li class=className on-detach('handleDetach') on-attach('handleAttach')>
    <div.view>
        <input.toggle
            type="checkbox"
            checked=input.completed
            aria-label="Toggle todo completed"
            on-change("handleCheckboxChange") />

        <label on-dblclick("handleLabelDblClick")>
            ${input.title}
        </label>

        <button.destroy on-click("removeTodo")
            aria-label="Delete todo"/>
    </div>

    <input.edit title="Enter the new todo title"
        type="text"
        value=state.editingTitle
        key="titleInput"
        on-blur('saveEdit')
        on-change('saveEdit')
        on-keydown('handleInputKeyDown') />
</li>
